# 2019/04/08

##### 2.4 NumPy #####
# 内部はC言語で実装されているため高速に動作する
# 大規模な数学関数ライブラリを持っており，演算機能が充実している．



##### 2.4.1 NumPyのインポート #####
import numpy as np



##### 2.4.2 NumPyの配列 #####
# NumPyの配列は，attay関数を使うことでPythonのリストから簡単につくることができる
a = np.array([0, 1, 2, 3, 4, 5])
print(a)
# [0 1 2 3 4 5]

# 配列が折り重なった，2次元配列を作ることもできる．
b = np.array([[0, 1, 2], [3, 4, 5]]) # リストのリストを渡す
print(b)
# [[0 1 2]
#  [3 4 5]]

# 同様に，3次元の配列も作ることができる．
c = np.array([[[0, 1, 2], [3, 4, 5]], [[5, 4, 3], [2, 1, 0]]])
print(c)
# [[[0 1 2]
#    3 4 5]]
#
#  [[5 4 3]
#    2 1 0]]]

# 同様にして，より多次元の配列を作ることもできる．
# 配列の形状(各次元の要素数)はshape関数で，
# 配列のトータルの要素数はsize関数で得ることができる．
print(np.shape(c))
print(np.size(c))
# (2, 2, 3)
# 12

# リストの要素数をカウントするlen関数は，配列に使用すると最初の次元の要素数をカウントする．
d = [[1,2],[3,4],[5,6]] # (3, 2)の形状を持つリスト
print(len(d))
print(len(np.array(d)))
# 3
# 3



##### 2.4.3 配列を生成するさまざまな関数 #####
print(np.zeros(10)) # 要素がすべて0の配列
print(np.ones(10)) # 要素がすべて1の配列
print(np.random.rand(10)) # 乱数の配列

# このうち，zeros関数とones関数は引数にタプルを指定することができる．
print(np.zeros((2, 3)))
print(np.ones((2, 3)))
# [[ 0. 0. 0.]
#  [ 0. 0. 0.]]
# [[ 1. 1. 1.]
#  [ 1. 1. 1.]]

# arange関数を用いると，連続した数値を要素にもつ配列を作ることができる．
print(np.arange(0, 1, 0.1))
# [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]
print(np.arange(10))
# [0 1 2 3 4 5 6 7 8 9]

# arange関数と似た関数に，linspace関数がある．
# arange関数との違いは，第3引数が刻み幅ではなく要素数である点．
# linspace関数の機能は，グラフにおける横軸の値などを表現するのに用いられる．
print(np.linspace(0, 1, 11))
# [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.]



# 2019/04/12

##### 2.4.4 reshapeによる形状の変換 #####
# 要素数が8の１次元配列を，形状が(2,4)の２次元配列に変換．
a = np.array([0, 1, 2, 3, 4, 5, 6, 7])
b = a.reshape(2, 4)
print(b)
# [[0 1 2 3]
#  [4 5 6 7]]

# reshapeは配列が持っているメソッドであることに注意
# NumPyには同じ操作を関数とメソッドの両方で行うことができるという特徴がある．
# 以下のように，関数のreshapeｗｐ使っても結果は同じになる．
b = np.reshape(a, (2, 4))

# トータルの要素数さえあっていれば，どのような形状でもreshapeで変換できる．
# reshapeの引数を-1とすると，どのような形状の配列でも１次元配列に変換できる．
c = a.reshape(2, -1)
print(c)
# [[0 1 2 3]
#  [4 5 6 7]]



##### 2.4.5 配列の演算 #####
a = np.array([0, 1, 2, 3, 4, 5]).reshape(2, 3) # 2行3列の配列を作成
print(a)
print(a + 3) # 各要素に3を足す
print(a * 3) # 各要素の3を掛ける

# 基本的に演算に使用する配列の形状は同じでないとエラーになる
b = np.array([5, 4, 3, 2, 1, 0]).reshape(2, 3)
print(b)
print(a + b) # 配列同士の足し算
print(a * b) # 配列同士の掛け算


##### 2.4.6 ブロードキャスト #####
# NumPyでは，特定の条件を満たしていれば違う形状の配列同士でも演算を行うことができる．
# この機能をブロードキャストという．

a = np.array([  [1, 1],
                [1, 1]] ) # ２次元配列
b = np.array([1, 2]) # １次元配列
# これらの2つの配列は次元が違うが，ブロードキャストにより演算することができる．
# (1次元配列が縦方向に拡張されることにより，同じ形状を有する2次元配列同士の演算が行われたことになる．)
print(a + b) # 次元が違う配列同士の足し算
# [[2 3]
#  [2 3]]

c = np.array([  [1],
                [2] ]) # 形状が(2, 1)の2次元配列
print(a + c)
# [[2 2]
#  [3 3]]

# 以上のように，ある方向に拡張することで配列の形状が一致すれば，
# ブロードキャストにより形状が異なる配列同士でも演算が可能．



##### 2.4.7 要素へのアクセス #####
##### 2.4.8 スライシング #####
##### 2.4.9 軸とtransposeメソッド #####
##### 2.4.10 NumPyの関数 #####