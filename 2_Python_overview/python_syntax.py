# 2019/04/05

##### 2.3.1 変数と型 #####
# 変数がどの型であるかはtype関数を用いて知ることができる
a = 123
print( type(a) ) # <class 'int'>

# bool型の値は数値として扱うことができる．
# True:1 False:0
a = True; b = False
print( a+b ) # 1
# Pythonでは，上記のように;（セミコロン）で区切ることで，
# 1行以内に複数の処理を書くことができる．

# 浮動小数点型の指数表記が可能．
1.2e5   # 1.2×10の５乗  120000.0
1.2e-5  # 1.2×10の-５乗 0.000012



##### 2.3.2 演算子 #####
# Pythonの演算子については，他のプログラミング言語と大きな違いはない
a = 3; b = 4

c = a + b
print(c) # 7

d = a < b # 比較
print(d) # True

e = 3 < 4 and 4 < 5 # 論理和
print(e) # True



##### 2.3.3 リスト #####
a = [1, 2, 3, 4, 5] # リストの作成

b = a[2] # 3番目の要素を取得
print(b) # 3

a.append(6) # 末尾に要素を加える
print(a) # [1, 2, 3, 4, 5, 6]

a[2] = 7 # 要素の入れ替え
print(a) # [1, 2, 7, 4, 5, 6]



##### 2.3.4 タプル #####
# タプルはリストと同じく複数の値をまとめて扱いたいときに利用するが，
# 要素の追加や削除，入れ替えなどはできない．
# 要素を変更する予定がない場合は，リストよりもタプルを使用するほうがベター．
a = (1, 2, 3, 4, 5) # タプルの作成

b = a[2] # 3番目の要素を取得
print(b) # 3

# 要素が一つだけのタプルは，以下のように要素の直後に,が必要．
(3,)

# +の演算子で，タプル同士を結合した新たなタプルを作ることができる．
print( a + (6, 7, 8, 9, 10) ) # (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

a = [1, 2, 3]
a1, a2, a3 = a # リストの各要素を別々の変数に代入
print(a1, a2, a3) # 1 2 3

b = (4, 5, 6)
b1, b2, b3 = b # タプルの各要素を別々の変数に代入
print(b1, b2, b3) # 4 5 6



##### 2.3.5 辞書 #####
# 辞書は，キーと値の組み合わせでデータを格納する．
a = {"Apple":3, "Pineapple":4} # 辞書の作成

print( a["Apple"] ) # "Apple"のキーをもつ値を取得

a["Pineapple"] = 6 # 要素の入れ替え
print( a["Pineapple"] ) # "Pineapple"のキーをもつ値を取得

a["Melon"] = 3 # 要素の追加
print( a ) # {'Apple': 3, 'Pineapple': 6, 'Melon': 3}

# 上記の例では，キーに文字列を使用しているが，
# キーには数値や文字列，タプルを利用することもできる．



##### 2.3.6 if文 #####